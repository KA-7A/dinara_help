def get_genome(filename):
    genome = ""                                         # Сделаем геном единой строкой, в ней будем считать процентное соотношение
    with open(filename, "r", encoding="utf-8") as file: # Читаем файл
        for line in file.readlines():                   # Делаем 2 в 1: file.readlines() -- достаём из файла список строк, идём по списку
                    # это работает так: 
                    # "".join(string_list) -- соединяет string_list (список) в одну строку без разделителей
                    # но обойтись этим нельзя было, потому что в line могут быть свои собственные разделители (например, \n в конце)
                    # что приведет к некорректному пересчету процентов 
                    # (так же, как если бы в строках были пробелы, запятые итд итп, но будем считать, что их нет. 
                    # Если нужно считать, что в файле есть какие-нибудь пробелы/ прочие символы, то имеет смысл 
                    # написать функцию, которая их убирает)
            genome += "".join(line.split("\n")[0].split(" "))         # Записывая всё в одну строку
    return genome.upper()

def compress_string(in_string):
    # Тут мы считаем, что наша строка без пробелов, без спецсимволов и вообще
    out_string = ""         # Результат работы. Пока пустой
    last_character = ''     # Будем помнить последнюю букву
    character_counter = 0   # И сколько раз она встретилась подряд

    for char in in_string:              # Идём по каждому символу в строке
        if char == last_character:      # Если нам попалась так же буква, что мы помним
            character_counter += 1          # Увеличиваем её счётчик и радуемся жизни
        else:                           # Если что-то другое, то...
            if character_counter != 0:  # Проверим, что это не начальная ситуация 
                # (потому что иначе в начале каждой скомпрессированной строки будет 0)
                out_string += last_character + str(character_counter)   # Добавляем старый символ и кол-во раз, сколько он встретился
            last_character = char       #  Запоминаем новый символ
            character_counter = 1       # Сбрасываем счётчик до единцы
    if character_counter != 0:          # В конце работы циклв мы всё ещё помним последний символ и сколько раз он встретился, но в результат мы это не записали
        out_string += last_character + str(character_counter)   # Исправляемся
    return out_string.lower()           # Возвращаем результат работы (в строчных буквах)


def main():
    in_filename = input("Введите имя файла с исходной записью -> ")     # Получаем имя файла 
    in_genome = get_genome(in_filename)                                 # Получаем геном (строку в верхнем регистре, реализацию можно вытащить из первой работы или импортировать, как это было сделано тут)
    out_genome = compress_string(in_genome)                             # Получаем сжатую запись
    out_filename = input("Введите имя файла для сжатой версии генома ->")
    with open(out_filename, "w", encoding="utf-8") as file:             # Открываем файл для сохранения ответа
        file.write(out_genome)                                          # Пишем ответ



if __name__ == "__main__":
    main()